// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: git.proto

package locust.git;

public final class Git {
  private Git() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface LineInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:locust.git.LineInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 old_line_number = 1;</code>
     * @return The oldLineNumber.
     */
    int getOldLineNumber();

    /**
     * <code>int32 new_line_number = 2;</code>
     * @return The newLineNumber.
     */
    int getNewLineNumber();

    /**
     * <code>string line_type = 3;</code>
     * @return The lineType.
     */
    java.lang.String getLineType();
    /**
     * <code>string line_type = 3;</code>
     * @return The bytes for lineType.
     */
    com.google.protobuf.ByteString
        getLineTypeBytes();

    /**
     * <code>string line = 4;</code>
     * @return The line.
     */
    java.lang.String getLine();
    /**
     * <code>string line = 4;</code>
     * @return The bytes for line.
     */
    com.google.protobuf.ByteString
        getLineBytes();
  }
  /**
   * Protobuf type {@code locust.git.LineInfo}
   */
  public static final class LineInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:locust.git.LineInfo)
      LineInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LineInfo.newBuilder() to construct.
    private LineInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LineInfo() {
      lineType_ = "";
      line_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LineInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LineInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              oldLineNumber_ = input.readInt32();
              break;
            }
            case 16: {

              newLineNumber_ = input.readInt32();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              lineType_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              line_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return locust.git.Git.internal_static_locust_git_LineInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return locust.git.Git.internal_static_locust_git_LineInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              locust.git.Git.LineInfo.class, locust.git.Git.LineInfo.Builder.class);
    }

    public static final int OLD_LINE_NUMBER_FIELD_NUMBER = 1;
    private int oldLineNumber_;
    /**
     * <code>int32 old_line_number = 1;</code>
     * @return The oldLineNumber.
     */
    @java.lang.Override
    public int getOldLineNumber() {
      return oldLineNumber_;
    }

    public static final int NEW_LINE_NUMBER_FIELD_NUMBER = 2;
    private int newLineNumber_;
    /**
     * <code>int32 new_line_number = 2;</code>
     * @return The newLineNumber.
     */
    @java.lang.Override
    public int getNewLineNumber() {
      return newLineNumber_;
    }

    public static final int LINE_TYPE_FIELD_NUMBER = 3;
    private volatile java.lang.Object lineType_;
    /**
     * <code>string line_type = 3;</code>
     * @return The lineType.
     */
    @java.lang.Override
    public java.lang.String getLineType() {
      java.lang.Object ref = lineType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        lineType_ = s;
        return s;
      }
    }
    /**
     * <code>string line_type = 3;</code>
     * @return The bytes for lineType.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLineTypeBytes() {
      java.lang.Object ref = lineType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        lineType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LINE_FIELD_NUMBER = 4;
    private volatile java.lang.Object line_;
    /**
     * <code>string line = 4;</code>
     * @return The line.
     */
    @java.lang.Override
    public java.lang.String getLine() {
      java.lang.Object ref = line_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        line_ = s;
        return s;
      }
    }
    /**
     * <code>string line = 4;</code>
     * @return The bytes for line.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLineBytes() {
      java.lang.Object ref = line_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        line_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (oldLineNumber_ != 0) {
        output.writeInt32(1, oldLineNumber_);
      }
      if (newLineNumber_ != 0) {
        output.writeInt32(2, newLineNumber_);
      }
      if (!getLineTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, lineType_);
      }
      if (!getLineBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, line_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (oldLineNumber_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, oldLineNumber_);
      }
      if (newLineNumber_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, newLineNumber_);
      }
      if (!getLineTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, lineType_);
      }
      if (!getLineBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, line_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof locust.git.Git.LineInfo)) {
        return super.equals(obj);
      }
      locust.git.Git.LineInfo other = (locust.git.Git.LineInfo) obj;

      if (getOldLineNumber()
          != other.getOldLineNumber()) return false;
      if (getNewLineNumber()
          != other.getNewLineNumber()) return false;
      if (!getLineType()
          .equals(other.getLineType())) return false;
      if (!getLine()
          .equals(other.getLine())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + OLD_LINE_NUMBER_FIELD_NUMBER;
      hash = (53 * hash) + getOldLineNumber();
      hash = (37 * hash) + NEW_LINE_NUMBER_FIELD_NUMBER;
      hash = (53 * hash) + getNewLineNumber();
      hash = (37 * hash) + LINE_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getLineType().hashCode();
      hash = (37 * hash) + LINE_FIELD_NUMBER;
      hash = (53 * hash) + getLine().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static locust.git.Git.LineInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.LineInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.LineInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.LineInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.LineInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.LineInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.LineInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static locust.git.Git.LineInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static locust.git.Git.LineInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static locust.git.Git.LineInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static locust.git.Git.LineInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static locust.git.Git.LineInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(locust.git.Git.LineInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code locust.git.LineInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:locust.git.LineInfo)
        locust.git.Git.LineInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return locust.git.Git.internal_static_locust_git_LineInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return locust.git.Git.internal_static_locust_git_LineInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                locust.git.Git.LineInfo.class, locust.git.Git.LineInfo.Builder.class);
      }

      // Construct using locust.git.Git.LineInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        oldLineNumber_ = 0;

        newLineNumber_ = 0;

        lineType_ = "";

        line_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return locust.git.Git.internal_static_locust_git_LineInfo_descriptor;
      }

      @java.lang.Override
      public locust.git.Git.LineInfo getDefaultInstanceForType() {
        return locust.git.Git.LineInfo.getDefaultInstance();
      }

      @java.lang.Override
      public locust.git.Git.LineInfo build() {
        locust.git.Git.LineInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public locust.git.Git.LineInfo buildPartial() {
        locust.git.Git.LineInfo result = new locust.git.Git.LineInfo(this);
        result.oldLineNumber_ = oldLineNumber_;
        result.newLineNumber_ = newLineNumber_;
        result.lineType_ = lineType_;
        result.line_ = line_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof locust.git.Git.LineInfo) {
          return mergeFrom((locust.git.Git.LineInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(locust.git.Git.LineInfo other) {
        if (other == locust.git.Git.LineInfo.getDefaultInstance()) return this;
        if (other.getOldLineNumber() != 0) {
          setOldLineNumber(other.getOldLineNumber());
        }
        if (other.getNewLineNumber() != 0) {
          setNewLineNumber(other.getNewLineNumber());
        }
        if (!other.getLineType().isEmpty()) {
          lineType_ = other.lineType_;
          onChanged();
        }
        if (!other.getLine().isEmpty()) {
          line_ = other.line_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        locust.git.Git.LineInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (locust.git.Git.LineInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int oldLineNumber_ ;
      /**
       * <code>int32 old_line_number = 1;</code>
       * @return The oldLineNumber.
       */
      @java.lang.Override
      public int getOldLineNumber() {
        return oldLineNumber_;
      }
      /**
       * <code>int32 old_line_number = 1;</code>
       * @param value The oldLineNumber to set.
       * @return This builder for chaining.
       */
      public Builder setOldLineNumber(int value) {
        
        oldLineNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 old_line_number = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearOldLineNumber() {
        
        oldLineNumber_ = 0;
        onChanged();
        return this;
      }

      private int newLineNumber_ ;
      /**
       * <code>int32 new_line_number = 2;</code>
       * @return The newLineNumber.
       */
      @java.lang.Override
      public int getNewLineNumber() {
        return newLineNumber_;
      }
      /**
       * <code>int32 new_line_number = 2;</code>
       * @param value The newLineNumber to set.
       * @return This builder for chaining.
       */
      public Builder setNewLineNumber(int value) {
        
        newLineNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 new_line_number = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearNewLineNumber() {
        
        newLineNumber_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object lineType_ = "";
      /**
       * <code>string line_type = 3;</code>
       * @return The lineType.
       */
      public java.lang.String getLineType() {
        java.lang.Object ref = lineType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          lineType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string line_type = 3;</code>
       * @return The bytes for lineType.
       */
      public com.google.protobuf.ByteString
          getLineTypeBytes() {
        java.lang.Object ref = lineType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          lineType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string line_type = 3;</code>
       * @param value The lineType to set.
       * @return This builder for chaining.
       */
      public Builder setLineType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        lineType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string line_type = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearLineType() {
        
        lineType_ = getDefaultInstance().getLineType();
        onChanged();
        return this;
      }
      /**
       * <code>string line_type = 3;</code>
       * @param value The bytes for lineType to set.
       * @return This builder for chaining.
       */
      public Builder setLineTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        lineType_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object line_ = "";
      /**
       * <code>string line = 4;</code>
       * @return The line.
       */
      public java.lang.String getLine() {
        java.lang.Object ref = line_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          line_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string line = 4;</code>
       * @return The bytes for line.
       */
      public com.google.protobuf.ByteString
          getLineBytes() {
        java.lang.Object ref = line_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          line_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string line = 4;</code>
       * @param value The line to set.
       * @return This builder for chaining.
       */
      public Builder setLine(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        line_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string line = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearLine() {
        
        line_ = getDefaultInstance().getLine();
        onChanged();
        return this;
      }
      /**
       * <code>string line = 4;</code>
       * @param value The bytes for line to set.
       * @return This builder for chaining.
       */
      public Builder setLineBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        line_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:locust.git.LineInfo)
    }

    // @@protoc_insertion_point(class_scope:locust.git.LineInfo)
    private static final locust.git.Git.LineInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new locust.git.Git.LineInfo();
    }

    public static locust.git.Git.LineInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LineInfo>
        PARSER = new com.google.protobuf.AbstractParser<LineInfo>() {
      @java.lang.Override
      public LineInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LineInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LineInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LineInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public locust.git.Git.LineInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HunkBoundaryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:locust.git.HunkBoundary)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int32 start = 1;</code>
     * @return The start.
     */
    int getStart();

    /**
     * <code>int32 end = 2;</code>
     * @return The end.
     */
    int getEnd();

    /**
     * <code>string operation_type = 3;</code>
     * @return The operationType.
     */
    java.lang.String getOperationType();
    /**
     * <code>string operation_type = 3;</code>
     * @return The bytes for operationType.
     */
    com.google.protobuf.ByteString
        getOperationTypeBytes();
  }
  /**
   * Protobuf type {@code locust.git.HunkBoundary}
   */
  public static final class HunkBoundary extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:locust.git.HunkBoundary)
      HunkBoundaryOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HunkBoundary.newBuilder() to construct.
    private HunkBoundary(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HunkBoundary() {
      operationType_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HunkBoundary();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HunkBoundary(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              start_ = input.readInt32();
              break;
            }
            case 16: {

              end_ = input.readInt32();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              operationType_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return locust.git.Git.internal_static_locust_git_HunkBoundary_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return locust.git.Git.internal_static_locust_git_HunkBoundary_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              locust.git.Git.HunkBoundary.class, locust.git.Git.HunkBoundary.Builder.class);
    }

    public static final int START_FIELD_NUMBER = 1;
    private int start_;
    /**
     * <code>int32 start = 1;</code>
     * @return The start.
     */
    @java.lang.Override
    public int getStart() {
      return start_;
    }

    public static final int END_FIELD_NUMBER = 2;
    private int end_;
    /**
     * <code>int32 end = 2;</code>
     * @return The end.
     */
    @java.lang.Override
    public int getEnd() {
      return end_;
    }

    public static final int OPERATION_TYPE_FIELD_NUMBER = 3;
    private volatile java.lang.Object operationType_;
    /**
     * <code>string operation_type = 3;</code>
     * @return The operationType.
     */
    @java.lang.Override
    public java.lang.String getOperationType() {
      java.lang.Object ref = operationType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        operationType_ = s;
        return s;
      }
    }
    /**
     * <code>string operation_type = 3;</code>
     * @return The bytes for operationType.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOperationTypeBytes() {
      java.lang.Object ref = operationType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        operationType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (start_ != 0) {
        output.writeInt32(1, start_);
      }
      if (end_ != 0) {
        output.writeInt32(2, end_);
      }
      if (!getOperationTypeBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, operationType_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (start_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, start_);
      }
      if (end_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, end_);
      }
      if (!getOperationTypeBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, operationType_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof locust.git.Git.HunkBoundary)) {
        return super.equals(obj);
      }
      locust.git.Git.HunkBoundary other = (locust.git.Git.HunkBoundary) obj;

      if (getStart()
          != other.getStart()) return false;
      if (getEnd()
          != other.getEnd()) return false;
      if (!getOperationType()
          .equals(other.getOperationType())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + START_FIELD_NUMBER;
      hash = (53 * hash) + getStart();
      hash = (37 * hash) + END_FIELD_NUMBER;
      hash = (53 * hash) + getEnd();
      hash = (37 * hash) + OPERATION_TYPE_FIELD_NUMBER;
      hash = (53 * hash) + getOperationType().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static locust.git.Git.HunkBoundary parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.HunkBoundary parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.HunkBoundary parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.HunkBoundary parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.HunkBoundary parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.HunkBoundary parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.HunkBoundary parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static locust.git.Git.HunkBoundary parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static locust.git.Git.HunkBoundary parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static locust.git.Git.HunkBoundary parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static locust.git.Git.HunkBoundary parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static locust.git.Git.HunkBoundary parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(locust.git.Git.HunkBoundary prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code locust.git.HunkBoundary}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:locust.git.HunkBoundary)
        locust.git.Git.HunkBoundaryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return locust.git.Git.internal_static_locust_git_HunkBoundary_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return locust.git.Git.internal_static_locust_git_HunkBoundary_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                locust.git.Git.HunkBoundary.class, locust.git.Git.HunkBoundary.Builder.class);
      }

      // Construct using locust.git.Git.HunkBoundary.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        start_ = 0;

        end_ = 0;

        operationType_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return locust.git.Git.internal_static_locust_git_HunkBoundary_descriptor;
      }

      @java.lang.Override
      public locust.git.Git.HunkBoundary getDefaultInstanceForType() {
        return locust.git.Git.HunkBoundary.getDefaultInstance();
      }

      @java.lang.Override
      public locust.git.Git.HunkBoundary build() {
        locust.git.Git.HunkBoundary result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public locust.git.Git.HunkBoundary buildPartial() {
        locust.git.Git.HunkBoundary result = new locust.git.Git.HunkBoundary(this);
        result.start_ = start_;
        result.end_ = end_;
        result.operationType_ = operationType_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof locust.git.Git.HunkBoundary) {
          return mergeFrom((locust.git.Git.HunkBoundary)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(locust.git.Git.HunkBoundary other) {
        if (other == locust.git.Git.HunkBoundary.getDefaultInstance()) return this;
        if (other.getStart() != 0) {
          setStart(other.getStart());
        }
        if (other.getEnd() != 0) {
          setEnd(other.getEnd());
        }
        if (!other.getOperationType().isEmpty()) {
          operationType_ = other.operationType_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        locust.git.Git.HunkBoundary parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (locust.git.Git.HunkBoundary) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int start_ ;
      /**
       * <code>int32 start = 1;</code>
       * @return The start.
       */
      @java.lang.Override
      public int getStart() {
        return start_;
      }
      /**
       * <code>int32 start = 1;</code>
       * @param value The start to set.
       * @return This builder for chaining.
       */
      public Builder setStart(int value) {
        
        start_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 start = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearStart() {
        
        start_ = 0;
        onChanged();
        return this;
      }

      private int end_ ;
      /**
       * <code>int32 end = 2;</code>
       * @return The end.
       */
      @java.lang.Override
      public int getEnd() {
        return end_;
      }
      /**
       * <code>int32 end = 2;</code>
       * @param value The end to set.
       * @return This builder for chaining.
       */
      public Builder setEnd(int value) {
        
        end_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 end = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnd() {
        
        end_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object operationType_ = "";
      /**
       * <code>string operation_type = 3;</code>
       * @return The operationType.
       */
      public java.lang.String getOperationType() {
        java.lang.Object ref = operationType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          operationType_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string operation_type = 3;</code>
       * @return The bytes for operationType.
       */
      public com.google.protobuf.ByteString
          getOperationTypeBytes() {
        java.lang.Object ref = operationType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          operationType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string operation_type = 3;</code>
       * @param value The operationType to set.
       * @return This builder for chaining.
       */
      public Builder setOperationType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        operationType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string operation_type = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearOperationType() {
        
        operationType_ = getDefaultInstance().getOperationType();
        onChanged();
        return this;
      }
      /**
       * <code>string operation_type = 3;</code>
       * @param value The bytes for operationType to set.
       * @return This builder for chaining.
       */
      public Builder setOperationTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        operationType_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:locust.git.HunkBoundary)
    }

    // @@protoc_insertion_point(class_scope:locust.git.HunkBoundary)
    private static final locust.git.Git.HunkBoundary DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new locust.git.Git.HunkBoundary();
    }

    public static locust.git.Git.HunkBoundary getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HunkBoundary>
        PARSER = new com.google.protobuf.AbstractParser<HunkBoundary>() {
      @java.lang.Override
      public HunkBoundary parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HunkBoundary(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HunkBoundary> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HunkBoundary> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public locust.git.Git.HunkBoundary getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HunkInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:locust.git.HunkInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string header = 1;</code>
     * @return The header.
     */
    java.lang.String getHeader();
    /**
     * <code>string header = 1;</code>
     * @return The bytes for header.
     */
    com.google.protobuf.ByteString
        getHeaderBytes();

    /**
     * <code>repeated .locust.git.LineInfo lines = 2;</code>
     */
    java.util.List<locust.git.Git.LineInfo> 
        getLinesList();
    /**
     * <code>repeated .locust.git.LineInfo lines = 2;</code>
     */
    locust.git.Git.LineInfo getLines(int index);
    /**
     * <code>repeated .locust.git.LineInfo lines = 2;</code>
     */
    int getLinesCount();
    /**
     * <code>repeated .locust.git.LineInfo lines = 2;</code>
     */
    java.util.List<? extends locust.git.Git.LineInfoOrBuilder> 
        getLinesOrBuilderList();
    /**
     * <code>repeated .locust.git.LineInfo lines = 2;</code>
     */
    locust.git.Git.LineInfoOrBuilder getLinesOrBuilder(
        int index);

    /**
     * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
     * @return Whether the totalBoundary field is set.
     */
    boolean hasTotalBoundary();
    /**
     * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
     * @return The totalBoundary.
     */
    locust.git.Git.HunkBoundary getTotalBoundary();
    /**
     * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
     */
    locust.git.Git.HunkBoundaryOrBuilder getTotalBoundaryOrBuilder();

    /**
     * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
     * @return Whether the insertionsBoundary field is set.
     */
    boolean hasInsertionsBoundary();
    /**
     * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
     * @return The insertionsBoundary.
     */
    locust.git.Git.HunkBoundary getInsertionsBoundary();
    /**
     * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
     */
    locust.git.Git.HunkBoundaryOrBuilder getInsertionsBoundaryOrBuilder();

    /**
     * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
     * @return Whether the deletionsBoundary field is set.
     */
    boolean hasDeletionsBoundary();
    /**
     * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
     * @return The deletionsBoundary.
     */
    locust.git.Git.HunkBoundary getDeletionsBoundary();
    /**
     * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
     */
    locust.git.Git.HunkBoundaryOrBuilder getDeletionsBoundaryOrBuilder();
  }
  /**
   * Protobuf type {@code locust.git.HunkInfo}
   */
  public static final class HunkInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:locust.git.HunkInfo)
      HunkInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HunkInfo.newBuilder() to construct.
    private HunkInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HunkInfo() {
      header_ = "";
      lines_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HunkInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HunkInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              header_ = s;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                lines_ = new java.util.ArrayList<locust.git.Git.LineInfo>();
                mutable_bitField0_ |= 0x00000001;
              }
              lines_.add(
                  input.readMessage(locust.git.Git.LineInfo.parser(), extensionRegistry));
              break;
            }
            case 26: {
              locust.git.Git.HunkBoundary.Builder subBuilder = null;
              if (totalBoundary_ != null) {
                subBuilder = totalBoundary_.toBuilder();
              }
              totalBoundary_ = input.readMessage(locust.git.Git.HunkBoundary.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(totalBoundary_);
                totalBoundary_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              locust.git.Git.HunkBoundary.Builder subBuilder = null;
              if (insertionsBoundary_ != null) {
                subBuilder = insertionsBoundary_.toBuilder();
              }
              insertionsBoundary_ = input.readMessage(locust.git.Git.HunkBoundary.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(insertionsBoundary_);
                insertionsBoundary_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              locust.git.Git.HunkBoundary.Builder subBuilder = null;
              if (deletionsBoundary_ != null) {
                subBuilder = deletionsBoundary_.toBuilder();
              }
              deletionsBoundary_ = input.readMessage(locust.git.Git.HunkBoundary.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(deletionsBoundary_);
                deletionsBoundary_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          lines_ = java.util.Collections.unmodifiableList(lines_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return locust.git.Git.internal_static_locust_git_HunkInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return locust.git.Git.internal_static_locust_git_HunkInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              locust.git.Git.HunkInfo.class, locust.git.Git.HunkInfo.Builder.class);
    }

    public static final int HEADER_FIELD_NUMBER = 1;
    private volatile java.lang.Object header_;
    /**
     * <code>string header = 1;</code>
     * @return The header.
     */
    @java.lang.Override
    public java.lang.String getHeader() {
      java.lang.Object ref = header_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        header_ = s;
        return s;
      }
    }
    /**
     * <code>string header = 1;</code>
     * @return The bytes for header.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getHeaderBytes() {
      java.lang.Object ref = header_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        header_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LINES_FIELD_NUMBER = 2;
    private java.util.List<locust.git.Git.LineInfo> lines_;
    /**
     * <code>repeated .locust.git.LineInfo lines = 2;</code>
     */
    @java.lang.Override
    public java.util.List<locust.git.Git.LineInfo> getLinesList() {
      return lines_;
    }
    /**
     * <code>repeated .locust.git.LineInfo lines = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends locust.git.Git.LineInfoOrBuilder> 
        getLinesOrBuilderList() {
      return lines_;
    }
    /**
     * <code>repeated .locust.git.LineInfo lines = 2;</code>
     */
    @java.lang.Override
    public int getLinesCount() {
      return lines_.size();
    }
    /**
     * <code>repeated .locust.git.LineInfo lines = 2;</code>
     */
    @java.lang.Override
    public locust.git.Git.LineInfo getLines(int index) {
      return lines_.get(index);
    }
    /**
     * <code>repeated .locust.git.LineInfo lines = 2;</code>
     */
    @java.lang.Override
    public locust.git.Git.LineInfoOrBuilder getLinesOrBuilder(
        int index) {
      return lines_.get(index);
    }

    public static final int TOTAL_BOUNDARY_FIELD_NUMBER = 3;
    private locust.git.Git.HunkBoundary totalBoundary_;
    /**
     * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
     * @return Whether the totalBoundary field is set.
     */
    @java.lang.Override
    public boolean hasTotalBoundary() {
      return totalBoundary_ != null;
    }
    /**
     * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
     * @return The totalBoundary.
     */
    @java.lang.Override
    public locust.git.Git.HunkBoundary getTotalBoundary() {
      return totalBoundary_ == null ? locust.git.Git.HunkBoundary.getDefaultInstance() : totalBoundary_;
    }
    /**
     * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
     */
    @java.lang.Override
    public locust.git.Git.HunkBoundaryOrBuilder getTotalBoundaryOrBuilder() {
      return getTotalBoundary();
    }

    public static final int INSERTIONS_BOUNDARY_FIELD_NUMBER = 4;
    private locust.git.Git.HunkBoundary insertionsBoundary_;
    /**
     * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
     * @return Whether the insertionsBoundary field is set.
     */
    @java.lang.Override
    public boolean hasInsertionsBoundary() {
      return insertionsBoundary_ != null;
    }
    /**
     * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
     * @return The insertionsBoundary.
     */
    @java.lang.Override
    public locust.git.Git.HunkBoundary getInsertionsBoundary() {
      return insertionsBoundary_ == null ? locust.git.Git.HunkBoundary.getDefaultInstance() : insertionsBoundary_;
    }
    /**
     * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
     */
    @java.lang.Override
    public locust.git.Git.HunkBoundaryOrBuilder getInsertionsBoundaryOrBuilder() {
      return getInsertionsBoundary();
    }

    public static final int DELETIONS_BOUNDARY_FIELD_NUMBER = 5;
    private locust.git.Git.HunkBoundary deletionsBoundary_;
    /**
     * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
     * @return Whether the deletionsBoundary field is set.
     */
    @java.lang.Override
    public boolean hasDeletionsBoundary() {
      return deletionsBoundary_ != null;
    }
    /**
     * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
     * @return The deletionsBoundary.
     */
    @java.lang.Override
    public locust.git.Git.HunkBoundary getDeletionsBoundary() {
      return deletionsBoundary_ == null ? locust.git.Git.HunkBoundary.getDefaultInstance() : deletionsBoundary_;
    }
    /**
     * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
     */
    @java.lang.Override
    public locust.git.Git.HunkBoundaryOrBuilder getDeletionsBoundaryOrBuilder() {
      return getDeletionsBoundary();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getHeaderBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, header_);
      }
      for (int i = 0; i < lines_.size(); i++) {
        output.writeMessage(2, lines_.get(i));
      }
      if (totalBoundary_ != null) {
        output.writeMessage(3, getTotalBoundary());
      }
      if (insertionsBoundary_ != null) {
        output.writeMessage(4, getInsertionsBoundary());
      }
      if (deletionsBoundary_ != null) {
        output.writeMessage(5, getDeletionsBoundary());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getHeaderBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, header_);
      }
      for (int i = 0; i < lines_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, lines_.get(i));
      }
      if (totalBoundary_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getTotalBoundary());
      }
      if (insertionsBoundary_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getInsertionsBoundary());
      }
      if (deletionsBoundary_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getDeletionsBoundary());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof locust.git.Git.HunkInfo)) {
        return super.equals(obj);
      }
      locust.git.Git.HunkInfo other = (locust.git.Git.HunkInfo) obj;

      if (!getHeader()
          .equals(other.getHeader())) return false;
      if (!getLinesList()
          .equals(other.getLinesList())) return false;
      if (hasTotalBoundary() != other.hasTotalBoundary()) return false;
      if (hasTotalBoundary()) {
        if (!getTotalBoundary()
            .equals(other.getTotalBoundary())) return false;
      }
      if (hasInsertionsBoundary() != other.hasInsertionsBoundary()) return false;
      if (hasInsertionsBoundary()) {
        if (!getInsertionsBoundary()
            .equals(other.getInsertionsBoundary())) return false;
      }
      if (hasDeletionsBoundary() != other.hasDeletionsBoundary()) return false;
      if (hasDeletionsBoundary()) {
        if (!getDeletionsBoundary()
            .equals(other.getDeletionsBoundary())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + HEADER_FIELD_NUMBER;
      hash = (53 * hash) + getHeader().hashCode();
      if (getLinesCount() > 0) {
        hash = (37 * hash) + LINES_FIELD_NUMBER;
        hash = (53 * hash) + getLinesList().hashCode();
      }
      if (hasTotalBoundary()) {
        hash = (37 * hash) + TOTAL_BOUNDARY_FIELD_NUMBER;
        hash = (53 * hash) + getTotalBoundary().hashCode();
      }
      if (hasInsertionsBoundary()) {
        hash = (37 * hash) + INSERTIONS_BOUNDARY_FIELD_NUMBER;
        hash = (53 * hash) + getInsertionsBoundary().hashCode();
      }
      if (hasDeletionsBoundary()) {
        hash = (37 * hash) + DELETIONS_BOUNDARY_FIELD_NUMBER;
        hash = (53 * hash) + getDeletionsBoundary().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static locust.git.Git.HunkInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.HunkInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.HunkInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.HunkInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.HunkInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.HunkInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.HunkInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static locust.git.Git.HunkInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static locust.git.Git.HunkInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static locust.git.Git.HunkInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static locust.git.Git.HunkInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static locust.git.Git.HunkInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(locust.git.Git.HunkInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code locust.git.HunkInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:locust.git.HunkInfo)
        locust.git.Git.HunkInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return locust.git.Git.internal_static_locust_git_HunkInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return locust.git.Git.internal_static_locust_git_HunkInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                locust.git.Git.HunkInfo.class, locust.git.Git.HunkInfo.Builder.class);
      }

      // Construct using locust.git.Git.HunkInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getLinesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        header_ = "";

        if (linesBuilder_ == null) {
          lines_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          linesBuilder_.clear();
        }
        if (totalBoundaryBuilder_ == null) {
          totalBoundary_ = null;
        } else {
          totalBoundary_ = null;
          totalBoundaryBuilder_ = null;
        }
        if (insertionsBoundaryBuilder_ == null) {
          insertionsBoundary_ = null;
        } else {
          insertionsBoundary_ = null;
          insertionsBoundaryBuilder_ = null;
        }
        if (deletionsBoundaryBuilder_ == null) {
          deletionsBoundary_ = null;
        } else {
          deletionsBoundary_ = null;
          deletionsBoundaryBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return locust.git.Git.internal_static_locust_git_HunkInfo_descriptor;
      }

      @java.lang.Override
      public locust.git.Git.HunkInfo getDefaultInstanceForType() {
        return locust.git.Git.HunkInfo.getDefaultInstance();
      }

      @java.lang.Override
      public locust.git.Git.HunkInfo build() {
        locust.git.Git.HunkInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public locust.git.Git.HunkInfo buildPartial() {
        locust.git.Git.HunkInfo result = new locust.git.Git.HunkInfo(this);
        int from_bitField0_ = bitField0_;
        result.header_ = header_;
        if (linesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            lines_ = java.util.Collections.unmodifiableList(lines_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.lines_ = lines_;
        } else {
          result.lines_ = linesBuilder_.build();
        }
        if (totalBoundaryBuilder_ == null) {
          result.totalBoundary_ = totalBoundary_;
        } else {
          result.totalBoundary_ = totalBoundaryBuilder_.build();
        }
        if (insertionsBoundaryBuilder_ == null) {
          result.insertionsBoundary_ = insertionsBoundary_;
        } else {
          result.insertionsBoundary_ = insertionsBoundaryBuilder_.build();
        }
        if (deletionsBoundaryBuilder_ == null) {
          result.deletionsBoundary_ = deletionsBoundary_;
        } else {
          result.deletionsBoundary_ = deletionsBoundaryBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof locust.git.Git.HunkInfo) {
          return mergeFrom((locust.git.Git.HunkInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(locust.git.Git.HunkInfo other) {
        if (other == locust.git.Git.HunkInfo.getDefaultInstance()) return this;
        if (!other.getHeader().isEmpty()) {
          header_ = other.header_;
          onChanged();
        }
        if (linesBuilder_ == null) {
          if (!other.lines_.isEmpty()) {
            if (lines_.isEmpty()) {
              lines_ = other.lines_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureLinesIsMutable();
              lines_.addAll(other.lines_);
            }
            onChanged();
          }
        } else {
          if (!other.lines_.isEmpty()) {
            if (linesBuilder_.isEmpty()) {
              linesBuilder_.dispose();
              linesBuilder_ = null;
              lines_ = other.lines_;
              bitField0_ = (bitField0_ & ~0x00000001);
              linesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLinesFieldBuilder() : null;
            } else {
              linesBuilder_.addAllMessages(other.lines_);
            }
          }
        }
        if (other.hasTotalBoundary()) {
          mergeTotalBoundary(other.getTotalBoundary());
        }
        if (other.hasInsertionsBoundary()) {
          mergeInsertionsBoundary(other.getInsertionsBoundary());
        }
        if (other.hasDeletionsBoundary()) {
          mergeDeletionsBoundary(other.getDeletionsBoundary());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        locust.git.Git.HunkInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (locust.git.Git.HunkInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object header_ = "";
      /**
       * <code>string header = 1;</code>
       * @return The header.
       */
      public java.lang.String getHeader() {
        java.lang.Object ref = header_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          header_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string header = 1;</code>
       * @return The bytes for header.
       */
      public com.google.protobuf.ByteString
          getHeaderBytes() {
        java.lang.Object ref = header_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          header_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string header = 1;</code>
       * @param value The header to set.
       * @return This builder for chaining.
       */
      public Builder setHeader(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        header_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string header = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearHeader() {
        
        header_ = getDefaultInstance().getHeader();
        onChanged();
        return this;
      }
      /**
       * <code>string header = 1;</code>
       * @param value The bytes for header to set.
       * @return This builder for chaining.
       */
      public Builder setHeaderBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        header_ = value;
        onChanged();
        return this;
      }

      private java.util.List<locust.git.Git.LineInfo> lines_ =
        java.util.Collections.emptyList();
      private void ensureLinesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          lines_ = new java.util.ArrayList<locust.git.Git.LineInfo>(lines_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          locust.git.Git.LineInfo, locust.git.Git.LineInfo.Builder, locust.git.Git.LineInfoOrBuilder> linesBuilder_;

      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public java.util.List<locust.git.Git.LineInfo> getLinesList() {
        if (linesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(lines_);
        } else {
          return linesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public int getLinesCount() {
        if (linesBuilder_ == null) {
          return lines_.size();
        } else {
          return linesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public locust.git.Git.LineInfo getLines(int index) {
        if (linesBuilder_ == null) {
          return lines_.get(index);
        } else {
          return linesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public Builder setLines(
          int index, locust.git.Git.LineInfo value) {
        if (linesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLinesIsMutable();
          lines_.set(index, value);
          onChanged();
        } else {
          linesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public Builder setLines(
          int index, locust.git.Git.LineInfo.Builder builderForValue) {
        if (linesBuilder_ == null) {
          ensureLinesIsMutable();
          lines_.set(index, builderForValue.build());
          onChanged();
        } else {
          linesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public Builder addLines(locust.git.Git.LineInfo value) {
        if (linesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLinesIsMutable();
          lines_.add(value);
          onChanged();
        } else {
          linesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public Builder addLines(
          int index, locust.git.Git.LineInfo value) {
        if (linesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLinesIsMutable();
          lines_.add(index, value);
          onChanged();
        } else {
          linesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public Builder addLines(
          locust.git.Git.LineInfo.Builder builderForValue) {
        if (linesBuilder_ == null) {
          ensureLinesIsMutable();
          lines_.add(builderForValue.build());
          onChanged();
        } else {
          linesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public Builder addLines(
          int index, locust.git.Git.LineInfo.Builder builderForValue) {
        if (linesBuilder_ == null) {
          ensureLinesIsMutable();
          lines_.add(index, builderForValue.build());
          onChanged();
        } else {
          linesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public Builder addAllLines(
          java.lang.Iterable<? extends locust.git.Git.LineInfo> values) {
        if (linesBuilder_ == null) {
          ensureLinesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, lines_);
          onChanged();
        } else {
          linesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public Builder clearLines() {
        if (linesBuilder_ == null) {
          lines_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          linesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public Builder removeLines(int index) {
        if (linesBuilder_ == null) {
          ensureLinesIsMutable();
          lines_.remove(index);
          onChanged();
        } else {
          linesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public locust.git.Git.LineInfo.Builder getLinesBuilder(
          int index) {
        return getLinesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public locust.git.Git.LineInfoOrBuilder getLinesOrBuilder(
          int index) {
        if (linesBuilder_ == null) {
          return lines_.get(index);  } else {
          return linesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public java.util.List<? extends locust.git.Git.LineInfoOrBuilder> 
           getLinesOrBuilderList() {
        if (linesBuilder_ != null) {
          return linesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(lines_);
        }
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public locust.git.Git.LineInfo.Builder addLinesBuilder() {
        return getLinesFieldBuilder().addBuilder(
            locust.git.Git.LineInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public locust.git.Git.LineInfo.Builder addLinesBuilder(
          int index) {
        return getLinesFieldBuilder().addBuilder(
            index, locust.git.Git.LineInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .locust.git.LineInfo lines = 2;</code>
       */
      public java.util.List<locust.git.Git.LineInfo.Builder> 
           getLinesBuilderList() {
        return getLinesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          locust.git.Git.LineInfo, locust.git.Git.LineInfo.Builder, locust.git.Git.LineInfoOrBuilder> 
          getLinesFieldBuilder() {
        if (linesBuilder_ == null) {
          linesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              locust.git.Git.LineInfo, locust.git.Git.LineInfo.Builder, locust.git.Git.LineInfoOrBuilder>(
                  lines_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          lines_ = null;
        }
        return linesBuilder_;
      }

      private locust.git.Git.HunkBoundary totalBoundary_;
      private com.google.protobuf.SingleFieldBuilderV3<
          locust.git.Git.HunkBoundary, locust.git.Git.HunkBoundary.Builder, locust.git.Git.HunkBoundaryOrBuilder> totalBoundaryBuilder_;
      /**
       * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
       * @return Whether the totalBoundary field is set.
       */
      public boolean hasTotalBoundary() {
        return totalBoundaryBuilder_ != null || totalBoundary_ != null;
      }
      /**
       * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
       * @return The totalBoundary.
       */
      public locust.git.Git.HunkBoundary getTotalBoundary() {
        if (totalBoundaryBuilder_ == null) {
          return totalBoundary_ == null ? locust.git.Git.HunkBoundary.getDefaultInstance() : totalBoundary_;
        } else {
          return totalBoundaryBuilder_.getMessage();
        }
      }
      /**
       * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
       */
      public Builder setTotalBoundary(locust.git.Git.HunkBoundary value) {
        if (totalBoundaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          totalBoundary_ = value;
          onChanged();
        } else {
          totalBoundaryBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
       */
      public Builder setTotalBoundary(
          locust.git.Git.HunkBoundary.Builder builderForValue) {
        if (totalBoundaryBuilder_ == null) {
          totalBoundary_ = builderForValue.build();
          onChanged();
        } else {
          totalBoundaryBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
       */
      public Builder mergeTotalBoundary(locust.git.Git.HunkBoundary value) {
        if (totalBoundaryBuilder_ == null) {
          if (totalBoundary_ != null) {
            totalBoundary_ =
              locust.git.Git.HunkBoundary.newBuilder(totalBoundary_).mergeFrom(value).buildPartial();
          } else {
            totalBoundary_ = value;
          }
          onChanged();
        } else {
          totalBoundaryBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
       */
      public Builder clearTotalBoundary() {
        if (totalBoundaryBuilder_ == null) {
          totalBoundary_ = null;
          onChanged();
        } else {
          totalBoundary_ = null;
          totalBoundaryBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
       */
      public locust.git.Git.HunkBoundary.Builder getTotalBoundaryBuilder() {
        
        onChanged();
        return getTotalBoundaryFieldBuilder().getBuilder();
      }
      /**
       * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
       */
      public locust.git.Git.HunkBoundaryOrBuilder getTotalBoundaryOrBuilder() {
        if (totalBoundaryBuilder_ != null) {
          return totalBoundaryBuilder_.getMessageOrBuilder();
        } else {
          return totalBoundary_ == null ?
              locust.git.Git.HunkBoundary.getDefaultInstance() : totalBoundary_;
        }
      }
      /**
       * <code>.locust.git.HunkBoundary total_boundary = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          locust.git.Git.HunkBoundary, locust.git.Git.HunkBoundary.Builder, locust.git.Git.HunkBoundaryOrBuilder> 
          getTotalBoundaryFieldBuilder() {
        if (totalBoundaryBuilder_ == null) {
          totalBoundaryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              locust.git.Git.HunkBoundary, locust.git.Git.HunkBoundary.Builder, locust.git.Git.HunkBoundaryOrBuilder>(
                  getTotalBoundary(),
                  getParentForChildren(),
                  isClean());
          totalBoundary_ = null;
        }
        return totalBoundaryBuilder_;
      }

      private locust.git.Git.HunkBoundary insertionsBoundary_;
      private com.google.protobuf.SingleFieldBuilderV3<
          locust.git.Git.HunkBoundary, locust.git.Git.HunkBoundary.Builder, locust.git.Git.HunkBoundaryOrBuilder> insertionsBoundaryBuilder_;
      /**
       * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
       * @return Whether the insertionsBoundary field is set.
       */
      public boolean hasInsertionsBoundary() {
        return insertionsBoundaryBuilder_ != null || insertionsBoundary_ != null;
      }
      /**
       * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
       * @return The insertionsBoundary.
       */
      public locust.git.Git.HunkBoundary getInsertionsBoundary() {
        if (insertionsBoundaryBuilder_ == null) {
          return insertionsBoundary_ == null ? locust.git.Git.HunkBoundary.getDefaultInstance() : insertionsBoundary_;
        } else {
          return insertionsBoundaryBuilder_.getMessage();
        }
      }
      /**
       * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
       */
      public Builder setInsertionsBoundary(locust.git.Git.HunkBoundary value) {
        if (insertionsBoundaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          insertionsBoundary_ = value;
          onChanged();
        } else {
          insertionsBoundaryBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
       */
      public Builder setInsertionsBoundary(
          locust.git.Git.HunkBoundary.Builder builderForValue) {
        if (insertionsBoundaryBuilder_ == null) {
          insertionsBoundary_ = builderForValue.build();
          onChanged();
        } else {
          insertionsBoundaryBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
       */
      public Builder mergeInsertionsBoundary(locust.git.Git.HunkBoundary value) {
        if (insertionsBoundaryBuilder_ == null) {
          if (insertionsBoundary_ != null) {
            insertionsBoundary_ =
              locust.git.Git.HunkBoundary.newBuilder(insertionsBoundary_).mergeFrom(value).buildPartial();
          } else {
            insertionsBoundary_ = value;
          }
          onChanged();
        } else {
          insertionsBoundaryBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
       */
      public Builder clearInsertionsBoundary() {
        if (insertionsBoundaryBuilder_ == null) {
          insertionsBoundary_ = null;
          onChanged();
        } else {
          insertionsBoundary_ = null;
          insertionsBoundaryBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
       */
      public locust.git.Git.HunkBoundary.Builder getInsertionsBoundaryBuilder() {
        
        onChanged();
        return getInsertionsBoundaryFieldBuilder().getBuilder();
      }
      /**
       * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
       */
      public locust.git.Git.HunkBoundaryOrBuilder getInsertionsBoundaryOrBuilder() {
        if (insertionsBoundaryBuilder_ != null) {
          return insertionsBoundaryBuilder_.getMessageOrBuilder();
        } else {
          return insertionsBoundary_ == null ?
              locust.git.Git.HunkBoundary.getDefaultInstance() : insertionsBoundary_;
        }
      }
      /**
       * <code>.locust.git.HunkBoundary insertions_boundary = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          locust.git.Git.HunkBoundary, locust.git.Git.HunkBoundary.Builder, locust.git.Git.HunkBoundaryOrBuilder> 
          getInsertionsBoundaryFieldBuilder() {
        if (insertionsBoundaryBuilder_ == null) {
          insertionsBoundaryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              locust.git.Git.HunkBoundary, locust.git.Git.HunkBoundary.Builder, locust.git.Git.HunkBoundaryOrBuilder>(
                  getInsertionsBoundary(),
                  getParentForChildren(),
                  isClean());
          insertionsBoundary_ = null;
        }
        return insertionsBoundaryBuilder_;
      }

      private locust.git.Git.HunkBoundary deletionsBoundary_;
      private com.google.protobuf.SingleFieldBuilderV3<
          locust.git.Git.HunkBoundary, locust.git.Git.HunkBoundary.Builder, locust.git.Git.HunkBoundaryOrBuilder> deletionsBoundaryBuilder_;
      /**
       * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
       * @return Whether the deletionsBoundary field is set.
       */
      public boolean hasDeletionsBoundary() {
        return deletionsBoundaryBuilder_ != null || deletionsBoundary_ != null;
      }
      /**
       * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
       * @return The deletionsBoundary.
       */
      public locust.git.Git.HunkBoundary getDeletionsBoundary() {
        if (deletionsBoundaryBuilder_ == null) {
          return deletionsBoundary_ == null ? locust.git.Git.HunkBoundary.getDefaultInstance() : deletionsBoundary_;
        } else {
          return deletionsBoundaryBuilder_.getMessage();
        }
      }
      /**
       * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
       */
      public Builder setDeletionsBoundary(locust.git.Git.HunkBoundary value) {
        if (deletionsBoundaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          deletionsBoundary_ = value;
          onChanged();
        } else {
          deletionsBoundaryBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
       */
      public Builder setDeletionsBoundary(
          locust.git.Git.HunkBoundary.Builder builderForValue) {
        if (deletionsBoundaryBuilder_ == null) {
          deletionsBoundary_ = builderForValue.build();
          onChanged();
        } else {
          deletionsBoundaryBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
       */
      public Builder mergeDeletionsBoundary(locust.git.Git.HunkBoundary value) {
        if (deletionsBoundaryBuilder_ == null) {
          if (deletionsBoundary_ != null) {
            deletionsBoundary_ =
              locust.git.Git.HunkBoundary.newBuilder(deletionsBoundary_).mergeFrom(value).buildPartial();
          } else {
            deletionsBoundary_ = value;
          }
          onChanged();
        } else {
          deletionsBoundaryBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
       */
      public Builder clearDeletionsBoundary() {
        if (deletionsBoundaryBuilder_ == null) {
          deletionsBoundary_ = null;
          onChanged();
        } else {
          deletionsBoundary_ = null;
          deletionsBoundaryBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
       */
      public locust.git.Git.HunkBoundary.Builder getDeletionsBoundaryBuilder() {
        
        onChanged();
        return getDeletionsBoundaryFieldBuilder().getBuilder();
      }
      /**
       * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
       */
      public locust.git.Git.HunkBoundaryOrBuilder getDeletionsBoundaryOrBuilder() {
        if (deletionsBoundaryBuilder_ != null) {
          return deletionsBoundaryBuilder_.getMessageOrBuilder();
        } else {
          return deletionsBoundary_ == null ?
              locust.git.Git.HunkBoundary.getDefaultInstance() : deletionsBoundary_;
        }
      }
      /**
       * <code>.locust.git.HunkBoundary deletions_boundary = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          locust.git.Git.HunkBoundary, locust.git.Git.HunkBoundary.Builder, locust.git.Git.HunkBoundaryOrBuilder> 
          getDeletionsBoundaryFieldBuilder() {
        if (deletionsBoundaryBuilder_ == null) {
          deletionsBoundaryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              locust.git.Git.HunkBoundary, locust.git.Git.HunkBoundary.Builder, locust.git.Git.HunkBoundaryOrBuilder>(
                  getDeletionsBoundary(),
                  getParentForChildren(),
                  isClean());
          deletionsBoundary_ = null;
        }
        return deletionsBoundaryBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:locust.git.HunkInfo)
    }

    // @@protoc_insertion_point(class_scope:locust.git.HunkInfo)
    private static final locust.git.Git.HunkInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new locust.git.Git.HunkInfo();
    }

    public static locust.git.Git.HunkInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HunkInfo>
        PARSER = new com.google.protobuf.AbstractParser<HunkInfo>() {
      @java.lang.Override
      public HunkInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HunkInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HunkInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HunkInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public locust.git.Git.HunkInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PatchInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:locust.git.PatchInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string old_file = 1;</code>
     * @return The oldFile.
     */
    java.lang.String getOldFile();
    /**
     * <code>string old_file = 1;</code>
     * @return The bytes for oldFile.
     */
    com.google.protobuf.ByteString
        getOldFileBytes();

    /**
     * <code>string new_file = 2;</code>
     * @return The newFile.
     */
    java.lang.String getNewFile();
    /**
     * <code>string new_file = 2;</code>
     * @return The bytes for newFile.
     */
    com.google.protobuf.ByteString
        getNewFileBytes();

    /**
     * <code>string old_source = 3;</code>
     * @return The oldSource.
     */
    java.lang.String getOldSource();
    /**
     * <code>string old_source = 3;</code>
     * @return The bytes for oldSource.
     */
    com.google.protobuf.ByteString
        getOldSourceBytes();

    /**
     * <code>string new_source = 4;</code>
     * @return The newSource.
     */
    java.lang.String getNewSource();
    /**
     * <code>string new_source = 4;</code>
     * @return The bytes for newSource.
     */
    com.google.protobuf.ByteString
        getNewSourceBytes();

    /**
     * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
     */
    java.util.List<locust.git.Git.HunkInfo> 
        getHunksList();
    /**
     * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
     */
    locust.git.Git.HunkInfo getHunks(int index);
    /**
     * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
     */
    int getHunksCount();
    /**
     * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
     */
    java.util.List<? extends locust.git.Git.HunkInfoOrBuilder> 
        getHunksOrBuilderList();
    /**
     * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
     */
    locust.git.Git.HunkInfoOrBuilder getHunksOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code locust.git.PatchInfo}
   */
  public static final class PatchInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:locust.git.PatchInfo)
      PatchInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PatchInfo.newBuilder() to construct.
    private PatchInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PatchInfo() {
      oldFile_ = "";
      newFile_ = "";
      oldSource_ = "";
      newSource_ = "";
      hunks_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PatchInfo();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PatchInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              oldFile_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              newFile_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              oldSource_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              newSource_ = s;
              break;
            }
            case 42: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                hunks_ = new java.util.ArrayList<locust.git.Git.HunkInfo>();
                mutable_bitField0_ |= 0x00000001;
              }
              hunks_.add(
                  input.readMessage(locust.git.Git.HunkInfo.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          hunks_ = java.util.Collections.unmodifiableList(hunks_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return locust.git.Git.internal_static_locust_git_PatchInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return locust.git.Git.internal_static_locust_git_PatchInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              locust.git.Git.PatchInfo.class, locust.git.Git.PatchInfo.Builder.class);
    }

    public static final int OLD_FILE_FIELD_NUMBER = 1;
    private volatile java.lang.Object oldFile_;
    /**
     * <code>string old_file = 1;</code>
     * @return The oldFile.
     */
    @java.lang.Override
    public java.lang.String getOldFile() {
      java.lang.Object ref = oldFile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        oldFile_ = s;
        return s;
      }
    }
    /**
     * <code>string old_file = 1;</code>
     * @return The bytes for oldFile.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOldFileBytes() {
      java.lang.Object ref = oldFile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        oldFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NEW_FILE_FIELD_NUMBER = 2;
    private volatile java.lang.Object newFile_;
    /**
     * <code>string new_file = 2;</code>
     * @return The newFile.
     */
    @java.lang.Override
    public java.lang.String getNewFile() {
      java.lang.Object ref = newFile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        newFile_ = s;
        return s;
      }
    }
    /**
     * <code>string new_file = 2;</code>
     * @return The bytes for newFile.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNewFileBytes() {
      java.lang.Object ref = newFile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        newFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OLD_SOURCE_FIELD_NUMBER = 3;
    private volatile java.lang.Object oldSource_;
    /**
     * <code>string old_source = 3;</code>
     * @return The oldSource.
     */
    @java.lang.Override
    public java.lang.String getOldSource() {
      java.lang.Object ref = oldSource_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        oldSource_ = s;
        return s;
      }
    }
    /**
     * <code>string old_source = 3;</code>
     * @return The bytes for oldSource.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOldSourceBytes() {
      java.lang.Object ref = oldSource_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        oldSource_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NEW_SOURCE_FIELD_NUMBER = 4;
    private volatile java.lang.Object newSource_;
    /**
     * <code>string new_source = 4;</code>
     * @return The newSource.
     */
    @java.lang.Override
    public java.lang.String getNewSource() {
      java.lang.Object ref = newSource_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        newSource_ = s;
        return s;
      }
    }
    /**
     * <code>string new_source = 4;</code>
     * @return The bytes for newSource.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNewSourceBytes() {
      java.lang.Object ref = newSource_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        newSource_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HUNKS_FIELD_NUMBER = 5;
    private java.util.List<locust.git.Git.HunkInfo> hunks_;
    /**
     * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
     */
    @java.lang.Override
    public java.util.List<locust.git.Git.HunkInfo> getHunksList() {
      return hunks_;
    }
    /**
     * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
     */
    @java.lang.Override
    public java.util.List<? extends locust.git.Git.HunkInfoOrBuilder> 
        getHunksOrBuilderList() {
      return hunks_;
    }
    /**
     * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
     */
    @java.lang.Override
    public int getHunksCount() {
      return hunks_.size();
    }
    /**
     * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
     */
    @java.lang.Override
    public locust.git.Git.HunkInfo getHunks(int index) {
      return hunks_.get(index);
    }
    /**
     * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
     */
    @java.lang.Override
    public locust.git.Git.HunkInfoOrBuilder getHunksOrBuilder(
        int index) {
      return hunks_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getOldFileBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, oldFile_);
      }
      if (!getNewFileBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, newFile_);
      }
      if (!getOldSourceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, oldSource_);
      }
      if (!getNewSourceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, newSource_);
      }
      for (int i = 0; i < hunks_.size(); i++) {
        output.writeMessage(5, hunks_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getOldFileBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, oldFile_);
      }
      if (!getNewFileBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, newFile_);
      }
      if (!getOldSourceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, oldSource_);
      }
      if (!getNewSourceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, newSource_);
      }
      for (int i = 0; i < hunks_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, hunks_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof locust.git.Git.PatchInfo)) {
        return super.equals(obj);
      }
      locust.git.Git.PatchInfo other = (locust.git.Git.PatchInfo) obj;

      if (!getOldFile()
          .equals(other.getOldFile())) return false;
      if (!getNewFile()
          .equals(other.getNewFile())) return false;
      if (!getOldSource()
          .equals(other.getOldSource())) return false;
      if (!getNewSource()
          .equals(other.getNewSource())) return false;
      if (!getHunksList()
          .equals(other.getHunksList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + OLD_FILE_FIELD_NUMBER;
      hash = (53 * hash) + getOldFile().hashCode();
      hash = (37 * hash) + NEW_FILE_FIELD_NUMBER;
      hash = (53 * hash) + getNewFile().hashCode();
      hash = (37 * hash) + OLD_SOURCE_FIELD_NUMBER;
      hash = (53 * hash) + getOldSource().hashCode();
      hash = (37 * hash) + NEW_SOURCE_FIELD_NUMBER;
      hash = (53 * hash) + getNewSource().hashCode();
      if (getHunksCount() > 0) {
        hash = (37 * hash) + HUNKS_FIELD_NUMBER;
        hash = (53 * hash) + getHunksList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static locust.git.Git.PatchInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.PatchInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.PatchInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.PatchInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.PatchInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.PatchInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.PatchInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static locust.git.Git.PatchInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static locust.git.Git.PatchInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static locust.git.Git.PatchInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static locust.git.Git.PatchInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static locust.git.Git.PatchInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(locust.git.Git.PatchInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code locust.git.PatchInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:locust.git.PatchInfo)
        locust.git.Git.PatchInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return locust.git.Git.internal_static_locust_git_PatchInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return locust.git.Git.internal_static_locust_git_PatchInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                locust.git.Git.PatchInfo.class, locust.git.Git.PatchInfo.Builder.class);
      }

      // Construct using locust.git.Git.PatchInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getHunksFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        oldFile_ = "";

        newFile_ = "";

        oldSource_ = "";

        newSource_ = "";

        if (hunksBuilder_ == null) {
          hunks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          hunksBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return locust.git.Git.internal_static_locust_git_PatchInfo_descriptor;
      }

      @java.lang.Override
      public locust.git.Git.PatchInfo getDefaultInstanceForType() {
        return locust.git.Git.PatchInfo.getDefaultInstance();
      }

      @java.lang.Override
      public locust.git.Git.PatchInfo build() {
        locust.git.Git.PatchInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public locust.git.Git.PatchInfo buildPartial() {
        locust.git.Git.PatchInfo result = new locust.git.Git.PatchInfo(this);
        int from_bitField0_ = bitField0_;
        result.oldFile_ = oldFile_;
        result.newFile_ = newFile_;
        result.oldSource_ = oldSource_;
        result.newSource_ = newSource_;
        if (hunksBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            hunks_ = java.util.Collections.unmodifiableList(hunks_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.hunks_ = hunks_;
        } else {
          result.hunks_ = hunksBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof locust.git.Git.PatchInfo) {
          return mergeFrom((locust.git.Git.PatchInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(locust.git.Git.PatchInfo other) {
        if (other == locust.git.Git.PatchInfo.getDefaultInstance()) return this;
        if (!other.getOldFile().isEmpty()) {
          oldFile_ = other.oldFile_;
          onChanged();
        }
        if (!other.getNewFile().isEmpty()) {
          newFile_ = other.newFile_;
          onChanged();
        }
        if (!other.getOldSource().isEmpty()) {
          oldSource_ = other.oldSource_;
          onChanged();
        }
        if (!other.getNewSource().isEmpty()) {
          newSource_ = other.newSource_;
          onChanged();
        }
        if (hunksBuilder_ == null) {
          if (!other.hunks_.isEmpty()) {
            if (hunks_.isEmpty()) {
              hunks_ = other.hunks_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureHunksIsMutable();
              hunks_.addAll(other.hunks_);
            }
            onChanged();
          }
        } else {
          if (!other.hunks_.isEmpty()) {
            if (hunksBuilder_.isEmpty()) {
              hunksBuilder_.dispose();
              hunksBuilder_ = null;
              hunks_ = other.hunks_;
              bitField0_ = (bitField0_ & ~0x00000001);
              hunksBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getHunksFieldBuilder() : null;
            } else {
              hunksBuilder_.addAllMessages(other.hunks_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        locust.git.Git.PatchInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (locust.git.Git.PatchInfo) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object oldFile_ = "";
      /**
       * <code>string old_file = 1;</code>
       * @return The oldFile.
       */
      public java.lang.String getOldFile() {
        java.lang.Object ref = oldFile_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          oldFile_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string old_file = 1;</code>
       * @return The bytes for oldFile.
       */
      public com.google.protobuf.ByteString
          getOldFileBytes() {
        java.lang.Object ref = oldFile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          oldFile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string old_file = 1;</code>
       * @param value The oldFile to set.
       * @return This builder for chaining.
       */
      public Builder setOldFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        oldFile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string old_file = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearOldFile() {
        
        oldFile_ = getDefaultInstance().getOldFile();
        onChanged();
        return this;
      }
      /**
       * <code>string old_file = 1;</code>
       * @param value The bytes for oldFile to set.
       * @return This builder for chaining.
       */
      public Builder setOldFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        oldFile_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object newFile_ = "";
      /**
       * <code>string new_file = 2;</code>
       * @return The newFile.
       */
      public java.lang.String getNewFile() {
        java.lang.Object ref = newFile_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          newFile_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string new_file = 2;</code>
       * @return The bytes for newFile.
       */
      public com.google.protobuf.ByteString
          getNewFileBytes() {
        java.lang.Object ref = newFile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          newFile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string new_file = 2;</code>
       * @param value The newFile to set.
       * @return This builder for chaining.
       */
      public Builder setNewFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        newFile_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string new_file = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearNewFile() {
        
        newFile_ = getDefaultInstance().getNewFile();
        onChanged();
        return this;
      }
      /**
       * <code>string new_file = 2;</code>
       * @param value The bytes for newFile to set.
       * @return This builder for chaining.
       */
      public Builder setNewFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        newFile_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object oldSource_ = "";
      /**
       * <code>string old_source = 3;</code>
       * @return The oldSource.
       */
      public java.lang.String getOldSource() {
        java.lang.Object ref = oldSource_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          oldSource_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string old_source = 3;</code>
       * @return The bytes for oldSource.
       */
      public com.google.protobuf.ByteString
          getOldSourceBytes() {
        java.lang.Object ref = oldSource_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          oldSource_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string old_source = 3;</code>
       * @param value The oldSource to set.
       * @return This builder for chaining.
       */
      public Builder setOldSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        oldSource_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string old_source = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearOldSource() {
        
        oldSource_ = getDefaultInstance().getOldSource();
        onChanged();
        return this;
      }
      /**
       * <code>string old_source = 3;</code>
       * @param value The bytes for oldSource to set.
       * @return This builder for chaining.
       */
      public Builder setOldSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        oldSource_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object newSource_ = "";
      /**
       * <code>string new_source = 4;</code>
       * @return The newSource.
       */
      public java.lang.String getNewSource() {
        java.lang.Object ref = newSource_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          newSource_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string new_source = 4;</code>
       * @return The bytes for newSource.
       */
      public com.google.protobuf.ByteString
          getNewSourceBytes() {
        java.lang.Object ref = newSource_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          newSource_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string new_source = 4;</code>
       * @param value The newSource to set.
       * @return This builder for chaining.
       */
      public Builder setNewSource(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        newSource_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string new_source = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearNewSource() {
        
        newSource_ = getDefaultInstance().getNewSource();
        onChanged();
        return this;
      }
      /**
       * <code>string new_source = 4;</code>
       * @param value The bytes for newSource to set.
       * @return This builder for chaining.
       */
      public Builder setNewSourceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        newSource_ = value;
        onChanged();
        return this;
      }

      private java.util.List<locust.git.Git.HunkInfo> hunks_ =
        java.util.Collections.emptyList();
      private void ensureHunksIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          hunks_ = new java.util.ArrayList<locust.git.Git.HunkInfo>(hunks_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          locust.git.Git.HunkInfo, locust.git.Git.HunkInfo.Builder, locust.git.Git.HunkInfoOrBuilder> hunksBuilder_;

      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public java.util.List<locust.git.Git.HunkInfo> getHunksList() {
        if (hunksBuilder_ == null) {
          return java.util.Collections.unmodifiableList(hunks_);
        } else {
          return hunksBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public int getHunksCount() {
        if (hunksBuilder_ == null) {
          return hunks_.size();
        } else {
          return hunksBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public locust.git.Git.HunkInfo getHunks(int index) {
        if (hunksBuilder_ == null) {
          return hunks_.get(index);
        } else {
          return hunksBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public Builder setHunks(
          int index, locust.git.Git.HunkInfo value) {
        if (hunksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHunksIsMutable();
          hunks_.set(index, value);
          onChanged();
        } else {
          hunksBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public Builder setHunks(
          int index, locust.git.Git.HunkInfo.Builder builderForValue) {
        if (hunksBuilder_ == null) {
          ensureHunksIsMutable();
          hunks_.set(index, builderForValue.build());
          onChanged();
        } else {
          hunksBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public Builder addHunks(locust.git.Git.HunkInfo value) {
        if (hunksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHunksIsMutable();
          hunks_.add(value);
          onChanged();
        } else {
          hunksBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public Builder addHunks(
          int index, locust.git.Git.HunkInfo value) {
        if (hunksBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHunksIsMutable();
          hunks_.add(index, value);
          onChanged();
        } else {
          hunksBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public Builder addHunks(
          locust.git.Git.HunkInfo.Builder builderForValue) {
        if (hunksBuilder_ == null) {
          ensureHunksIsMutable();
          hunks_.add(builderForValue.build());
          onChanged();
        } else {
          hunksBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public Builder addHunks(
          int index, locust.git.Git.HunkInfo.Builder builderForValue) {
        if (hunksBuilder_ == null) {
          ensureHunksIsMutable();
          hunks_.add(index, builderForValue.build());
          onChanged();
        } else {
          hunksBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public Builder addAllHunks(
          java.lang.Iterable<? extends locust.git.Git.HunkInfo> values) {
        if (hunksBuilder_ == null) {
          ensureHunksIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, hunks_);
          onChanged();
        } else {
          hunksBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public Builder clearHunks() {
        if (hunksBuilder_ == null) {
          hunks_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          hunksBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public Builder removeHunks(int index) {
        if (hunksBuilder_ == null) {
          ensureHunksIsMutable();
          hunks_.remove(index);
          onChanged();
        } else {
          hunksBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public locust.git.Git.HunkInfo.Builder getHunksBuilder(
          int index) {
        return getHunksFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public locust.git.Git.HunkInfoOrBuilder getHunksOrBuilder(
          int index) {
        if (hunksBuilder_ == null) {
          return hunks_.get(index);  } else {
          return hunksBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public java.util.List<? extends locust.git.Git.HunkInfoOrBuilder> 
           getHunksOrBuilderList() {
        if (hunksBuilder_ != null) {
          return hunksBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(hunks_);
        }
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public locust.git.Git.HunkInfo.Builder addHunksBuilder() {
        return getHunksFieldBuilder().addBuilder(
            locust.git.Git.HunkInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public locust.git.Git.HunkInfo.Builder addHunksBuilder(
          int index) {
        return getHunksFieldBuilder().addBuilder(
            index, locust.git.Git.HunkInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .locust.git.HunkInfo hunks = 5;</code>
       */
      public java.util.List<locust.git.Git.HunkInfo.Builder> 
           getHunksBuilderList() {
        return getHunksFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          locust.git.Git.HunkInfo, locust.git.Git.HunkInfo.Builder, locust.git.Git.HunkInfoOrBuilder> 
          getHunksFieldBuilder() {
        if (hunksBuilder_ == null) {
          hunksBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              locust.git.Git.HunkInfo, locust.git.Git.HunkInfo.Builder, locust.git.Git.HunkInfoOrBuilder>(
                  hunks_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          hunks_ = null;
        }
        return hunksBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:locust.git.PatchInfo)
    }

    // @@protoc_insertion_point(class_scope:locust.git.PatchInfo)
    private static final locust.git.Git.PatchInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new locust.git.Git.PatchInfo();
    }

    public static locust.git.Git.PatchInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PatchInfo>
        PARSER = new com.google.protobuf.AbstractParser<PatchInfo>() {
      @java.lang.Override
      public PatchInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PatchInfo(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PatchInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PatchInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public locust.git.Git.PatchInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface GitResultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:locust.git.GitResult)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>string repo = 1;</code>
     * @return The repo.
     */
    java.lang.String getRepo();
    /**
     * <code>string repo = 1;</code>
     * @return The bytes for repo.
     */
    com.google.protobuf.ByteString
        getRepoBytes();

    /**
     * <code>string initial_ref = 2;</code>
     * @return The initialRef.
     */
    java.lang.String getInitialRef();
    /**
     * <code>string initial_ref = 2;</code>
     * @return The bytes for initialRef.
     */
    com.google.protobuf.ByteString
        getInitialRefBytes();

    /**
     * <code>string terminal_ref = 3;</code>
     * @return The terminalRef.
     */
    java.lang.String getTerminalRef();
    /**
     * <code>string terminal_ref = 3;</code>
     * @return The bytes for terminalRef.
     */
    com.google.protobuf.ByteString
        getTerminalRefBytes();

    /**
     * <code>repeated .locust.git.PatchInfo patches = 4;</code>
     */
    java.util.List<locust.git.Git.PatchInfo> 
        getPatchesList();
    /**
     * <code>repeated .locust.git.PatchInfo patches = 4;</code>
     */
    locust.git.Git.PatchInfo getPatches(int index);
    /**
     * <code>repeated .locust.git.PatchInfo patches = 4;</code>
     */
    int getPatchesCount();
    /**
     * <code>repeated .locust.git.PatchInfo patches = 4;</code>
     */
    java.util.List<? extends locust.git.Git.PatchInfoOrBuilder> 
        getPatchesOrBuilderList();
    /**
     * <code>repeated .locust.git.PatchInfo patches = 4;</code>
     */
    locust.git.Git.PatchInfoOrBuilder getPatchesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code locust.git.GitResult}
   */
  public static final class GitResult extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:locust.git.GitResult)
      GitResultOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use GitResult.newBuilder() to construct.
    private GitResult(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private GitResult() {
      repo_ = "";
      initialRef_ = "";
      terminalRef_ = "";
      patches_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new GitResult();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private GitResult(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              repo_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              initialRef_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              terminalRef_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                patches_ = new java.util.ArrayList<locust.git.Git.PatchInfo>();
                mutable_bitField0_ |= 0x00000001;
              }
              patches_.add(
                  input.readMessage(locust.git.Git.PatchInfo.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          patches_ = java.util.Collections.unmodifiableList(patches_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return locust.git.Git.internal_static_locust_git_GitResult_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return locust.git.Git.internal_static_locust_git_GitResult_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              locust.git.Git.GitResult.class, locust.git.Git.GitResult.Builder.class);
    }

    public static final int REPO_FIELD_NUMBER = 1;
    private volatile java.lang.Object repo_;
    /**
     * <code>string repo = 1;</code>
     * @return The repo.
     */
    @java.lang.Override
    public java.lang.String getRepo() {
      java.lang.Object ref = repo_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        repo_ = s;
        return s;
      }
    }
    /**
     * <code>string repo = 1;</code>
     * @return The bytes for repo.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRepoBytes() {
      java.lang.Object ref = repo_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        repo_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INITIAL_REF_FIELD_NUMBER = 2;
    private volatile java.lang.Object initialRef_;
    /**
     * <code>string initial_ref = 2;</code>
     * @return The initialRef.
     */
    @java.lang.Override
    public java.lang.String getInitialRef() {
      java.lang.Object ref = initialRef_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        initialRef_ = s;
        return s;
      }
    }
    /**
     * <code>string initial_ref = 2;</code>
     * @return The bytes for initialRef.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getInitialRefBytes() {
      java.lang.Object ref = initialRef_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        initialRef_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TERMINAL_REF_FIELD_NUMBER = 3;
    private volatile java.lang.Object terminalRef_;
    /**
     * <code>string terminal_ref = 3;</code>
     * @return The terminalRef.
     */
    @java.lang.Override
    public java.lang.String getTerminalRef() {
      java.lang.Object ref = terminalRef_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        terminalRef_ = s;
        return s;
      }
    }
    /**
     * <code>string terminal_ref = 3;</code>
     * @return The bytes for terminalRef.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTerminalRefBytes() {
      java.lang.Object ref = terminalRef_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        terminalRef_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PATCHES_FIELD_NUMBER = 4;
    private java.util.List<locust.git.Git.PatchInfo> patches_;
    /**
     * <code>repeated .locust.git.PatchInfo patches = 4;</code>
     */
    @java.lang.Override
    public java.util.List<locust.git.Git.PatchInfo> getPatchesList() {
      return patches_;
    }
    /**
     * <code>repeated .locust.git.PatchInfo patches = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends locust.git.Git.PatchInfoOrBuilder> 
        getPatchesOrBuilderList() {
      return patches_;
    }
    /**
     * <code>repeated .locust.git.PatchInfo patches = 4;</code>
     */
    @java.lang.Override
    public int getPatchesCount() {
      return patches_.size();
    }
    /**
     * <code>repeated .locust.git.PatchInfo patches = 4;</code>
     */
    @java.lang.Override
    public locust.git.Git.PatchInfo getPatches(int index) {
      return patches_.get(index);
    }
    /**
     * <code>repeated .locust.git.PatchInfo patches = 4;</code>
     */
    @java.lang.Override
    public locust.git.Git.PatchInfoOrBuilder getPatchesOrBuilder(
        int index) {
      return patches_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getRepoBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, repo_);
      }
      if (!getInitialRefBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, initialRef_);
      }
      if (!getTerminalRefBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, terminalRef_);
      }
      for (int i = 0; i < patches_.size(); i++) {
        output.writeMessage(4, patches_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getRepoBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, repo_);
      }
      if (!getInitialRefBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, initialRef_);
      }
      if (!getTerminalRefBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, terminalRef_);
      }
      for (int i = 0; i < patches_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, patches_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof locust.git.Git.GitResult)) {
        return super.equals(obj);
      }
      locust.git.Git.GitResult other = (locust.git.Git.GitResult) obj;

      if (!getRepo()
          .equals(other.getRepo())) return false;
      if (!getInitialRef()
          .equals(other.getInitialRef())) return false;
      if (!getTerminalRef()
          .equals(other.getTerminalRef())) return false;
      if (!getPatchesList()
          .equals(other.getPatchesList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + REPO_FIELD_NUMBER;
      hash = (53 * hash) + getRepo().hashCode();
      hash = (37 * hash) + INITIAL_REF_FIELD_NUMBER;
      hash = (53 * hash) + getInitialRef().hashCode();
      hash = (37 * hash) + TERMINAL_REF_FIELD_NUMBER;
      hash = (53 * hash) + getTerminalRef().hashCode();
      if (getPatchesCount() > 0) {
        hash = (37 * hash) + PATCHES_FIELD_NUMBER;
        hash = (53 * hash) + getPatchesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static locust.git.Git.GitResult parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.GitResult parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.GitResult parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.GitResult parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.GitResult parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static locust.git.Git.GitResult parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static locust.git.Git.GitResult parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static locust.git.Git.GitResult parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static locust.git.Git.GitResult parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static locust.git.Git.GitResult parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static locust.git.Git.GitResult parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static locust.git.Git.GitResult parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(locust.git.Git.GitResult prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code locust.git.GitResult}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:locust.git.GitResult)
        locust.git.Git.GitResultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return locust.git.Git.internal_static_locust_git_GitResult_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return locust.git.Git.internal_static_locust_git_GitResult_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                locust.git.Git.GitResult.class, locust.git.Git.GitResult.Builder.class);
      }

      // Construct using locust.git.Git.GitResult.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getPatchesFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        repo_ = "";

        initialRef_ = "";

        terminalRef_ = "";

        if (patchesBuilder_ == null) {
          patches_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          patchesBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return locust.git.Git.internal_static_locust_git_GitResult_descriptor;
      }

      @java.lang.Override
      public locust.git.Git.GitResult getDefaultInstanceForType() {
        return locust.git.Git.GitResult.getDefaultInstance();
      }

      @java.lang.Override
      public locust.git.Git.GitResult build() {
        locust.git.Git.GitResult result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public locust.git.Git.GitResult buildPartial() {
        locust.git.Git.GitResult result = new locust.git.Git.GitResult(this);
        int from_bitField0_ = bitField0_;
        result.repo_ = repo_;
        result.initialRef_ = initialRef_;
        result.terminalRef_ = terminalRef_;
        if (patchesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            patches_ = java.util.Collections.unmodifiableList(patches_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.patches_ = patches_;
        } else {
          result.patches_ = patchesBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof locust.git.Git.GitResult) {
          return mergeFrom((locust.git.Git.GitResult)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(locust.git.Git.GitResult other) {
        if (other == locust.git.Git.GitResult.getDefaultInstance()) return this;
        if (!other.getRepo().isEmpty()) {
          repo_ = other.repo_;
          onChanged();
        }
        if (!other.getInitialRef().isEmpty()) {
          initialRef_ = other.initialRef_;
          onChanged();
        }
        if (!other.getTerminalRef().isEmpty()) {
          terminalRef_ = other.terminalRef_;
          onChanged();
        }
        if (patchesBuilder_ == null) {
          if (!other.patches_.isEmpty()) {
            if (patches_.isEmpty()) {
              patches_ = other.patches_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePatchesIsMutable();
              patches_.addAll(other.patches_);
            }
            onChanged();
          }
        } else {
          if (!other.patches_.isEmpty()) {
            if (patchesBuilder_.isEmpty()) {
              patchesBuilder_.dispose();
              patchesBuilder_ = null;
              patches_ = other.patches_;
              bitField0_ = (bitField0_ & ~0x00000001);
              patchesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPatchesFieldBuilder() : null;
            } else {
              patchesBuilder_.addAllMessages(other.patches_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        locust.git.Git.GitResult parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (locust.git.Git.GitResult) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object repo_ = "";
      /**
       * <code>string repo = 1;</code>
       * @return The repo.
       */
      public java.lang.String getRepo() {
        java.lang.Object ref = repo_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          repo_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string repo = 1;</code>
       * @return The bytes for repo.
       */
      public com.google.protobuf.ByteString
          getRepoBytes() {
        java.lang.Object ref = repo_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          repo_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string repo = 1;</code>
       * @param value The repo to set.
       * @return This builder for chaining.
       */
      public Builder setRepo(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        repo_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string repo = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearRepo() {
        
        repo_ = getDefaultInstance().getRepo();
        onChanged();
        return this;
      }
      /**
       * <code>string repo = 1;</code>
       * @param value The bytes for repo to set.
       * @return This builder for chaining.
       */
      public Builder setRepoBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        repo_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object initialRef_ = "";
      /**
       * <code>string initial_ref = 2;</code>
       * @return The initialRef.
       */
      public java.lang.String getInitialRef() {
        java.lang.Object ref = initialRef_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          initialRef_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string initial_ref = 2;</code>
       * @return The bytes for initialRef.
       */
      public com.google.protobuf.ByteString
          getInitialRefBytes() {
        java.lang.Object ref = initialRef_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          initialRef_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string initial_ref = 2;</code>
       * @param value The initialRef to set.
       * @return This builder for chaining.
       */
      public Builder setInitialRef(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        initialRef_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string initial_ref = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearInitialRef() {
        
        initialRef_ = getDefaultInstance().getInitialRef();
        onChanged();
        return this;
      }
      /**
       * <code>string initial_ref = 2;</code>
       * @param value The bytes for initialRef to set.
       * @return This builder for chaining.
       */
      public Builder setInitialRefBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        initialRef_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object terminalRef_ = "";
      /**
       * <code>string terminal_ref = 3;</code>
       * @return The terminalRef.
       */
      public java.lang.String getTerminalRef() {
        java.lang.Object ref = terminalRef_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          terminalRef_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string terminal_ref = 3;</code>
       * @return The bytes for terminalRef.
       */
      public com.google.protobuf.ByteString
          getTerminalRefBytes() {
        java.lang.Object ref = terminalRef_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          terminalRef_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string terminal_ref = 3;</code>
       * @param value The terminalRef to set.
       * @return This builder for chaining.
       */
      public Builder setTerminalRef(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        terminalRef_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string terminal_ref = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearTerminalRef() {
        
        terminalRef_ = getDefaultInstance().getTerminalRef();
        onChanged();
        return this;
      }
      /**
       * <code>string terminal_ref = 3;</code>
       * @param value The bytes for terminalRef to set.
       * @return This builder for chaining.
       */
      public Builder setTerminalRefBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        terminalRef_ = value;
        onChanged();
        return this;
      }

      private java.util.List<locust.git.Git.PatchInfo> patches_ =
        java.util.Collections.emptyList();
      private void ensurePatchesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          patches_ = new java.util.ArrayList<locust.git.Git.PatchInfo>(patches_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          locust.git.Git.PatchInfo, locust.git.Git.PatchInfo.Builder, locust.git.Git.PatchInfoOrBuilder> patchesBuilder_;

      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public java.util.List<locust.git.Git.PatchInfo> getPatchesList() {
        if (patchesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(patches_);
        } else {
          return patchesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public int getPatchesCount() {
        if (patchesBuilder_ == null) {
          return patches_.size();
        } else {
          return patchesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public locust.git.Git.PatchInfo getPatches(int index) {
        if (patchesBuilder_ == null) {
          return patches_.get(index);
        } else {
          return patchesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public Builder setPatches(
          int index, locust.git.Git.PatchInfo value) {
        if (patchesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePatchesIsMutable();
          patches_.set(index, value);
          onChanged();
        } else {
          patchesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public Builder setPatches(
          int index, locust.git.Git.PatchInfo.Builder builderForValue) {
        if (patchesBuilder_ == null) {
          ensurePatchesIsMutable();
          patches_.set(index, builderForValue.build());
          onChanged();
        } else {
          patchesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public Builder addPatches(locust.git.Git.PatchInfo value) {
        if (patchesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePatchesIsMutable();
          patches_.add(value);
          onChanged();
        } else {
          patchesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public Builder addPatches(
          int index, locust.git.Git.PatchInfo value) {
        if (patchesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePatchesIsMutable();
          patches_.add(index, value);
          onChanged();
        } else {
          patchesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public Builder addPatches(
          locust.git.Git.PatchInfo.Builder builderForValue) {
        if (patchesBuilder_ == null) {
          ensurePatchesIsMutable();
          patches_.add(builderForValue.build());
          onChanged();
        } else {
          patchesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public Builder addPatches(
          int index, locust.git.Git.PatchInfo.Builder builderForValue) {
        if (patchesBuilder_ == null) {
          ensurePatchesIsMutable();
          patches_.add(index, builderForValue.build());
          onChanged();
        } else {
          patchesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public Builder addAllPatches(
          java.lang.Iterable<? extends locust.git.Git.PatchInfo> values) {
        if (patchesBuilder_ == null) {
          ensurePatchesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, patches_);
          onChanged();
        } else {
          patchesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public Builder clearPatches() {
        if (patchesBuilder_ == null) {
          patches_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          patchesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public Builder removePatches(int index) {
        if (patchesBuilder_ == null) {
          ensurePatchesIsMutable();
          patches_.remove(index);
          onChanged();
        } else {
          patchesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public locust.git.Git.PatchInfo.Builder getPatchesBuilder(
          int index) {
        return getPatchesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public locust.git.Git.PatchInfoOrBuilder getPatchesOrBuilder(
          int index) {
        if (patchesBuilder_ == null) {
          return patches_.get(index);  } else {
          return patchesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public java.util.List<? extends locust.git.Git.PatchInfoOrBuilder> 
           getPatchesOrBuilderList() {
        if (patchesBuilder_ != null) {
          return patchesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(patches_);
        }
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public locust.git.Git.PatchInfo.Builder addPatchesBuilder() {
        return getPatchesFieldBuilder().addBuilder(
            locust.git.Git.PatchInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public locust.git.Git.PatchInfo.Builder addPatchesBuilder(
          int index) {
        return getPatchesFieldBuilder().addBuilder(
            index, locust.git.Git.PatchInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .locust.git.PatchInfo patches = 4;</code>
       */
      public java.util.List<locust.git.Git.PatchInfo.Builder> 
           getPatchesBuilderList() {
        return getPatchesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          locust.git.Git.PatchInfo, locust.git.Git.PatchInfo.Builder, locust.git.Git.PatchInfoOrBuilder> 
          getPatchesFieldBuilder() {
        if (patchesBuilder_ == null) {
          patchesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              locust.git.Git.PatchInfo, locust.git.Git.PatchInfo.Builder, locust.git.Git.PatchInfoOrBuilder>(
                  patches_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          patches_ = null;
        }
        return patchesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:locust.git.GitResult)
    }

    // @@protoc_insertion_point(class_scope:locust.git.GitResult)
    private static final locust.git.Git.GitResult DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new locust.git.Git.GitResult();
    }

    public static locust.git.Git.GitResult getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<GitResult>
        PARSER = new com.google.protobuf.AbstractParser<GitResult>() {
      @java.lang.Override
      public GitResult parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GitResult(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<GitResult> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<GitResult> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public locust.git.Git.GitResult getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_locust_git_LineInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_locust_git_LineInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_locust_git_HunkBoundary_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_locust_git_HunkBoundary_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_locust_git_HunkInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_locust_git_HunkInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_locust_git_PatchInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_locust_git_PatchInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_locust_git_GitResult_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_locust_git_GitResult_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\tgit.proto\022\nlocust.git\"]\n\010LineInfo\022\027\n\017o" +
      "ld_line_number\030\001 \001(\005\022\027\n\017new_line_number\030" +
      "\002 \001(\005\022\021\n\tline_type\030\003 \001(\t\022\014\n\004line\030\004 \001(\t\"B" +
      "\n\014HunkBoundary\022\r\n\005start\030\001 \001(\005\022\013\n\003end\030\002 \001" +
      "(\005\022\026\n\016operation_type\030\003 \001(\t\"\336\001\n\010HunkInfo\022" +
      "\016\n\006header\030\001 \001(\t\022#\n\005lines\030\002 \003(\0132\024.locust." +
      "git.LineInfo\0220\n\016total_boundary\030\003 \001(\0132\030.l" +
      "ocust.git.HunkBoundary\0225\n\023insertions_bou" +
      "ndary\030\004 \001(\0132\030.locust.git.HunkBoundary\0224\n" +
      "\022deletions_boundary\030\005 \001(\0132\030.locust.git.H" +
      "unkBoundary\"|\n\tPatchInfo\022\020\n\010old_file\030\001 \001" +
      "(\t\022\020\n\010new_file\030\002 \001(\t\022\022\n\nold_source\030\003 \001(\t" +
      "\022\022\n\nnew_source\030\004 \001(\t\022#\n\005hunks\030\005 \003(\0132\024.lo" +
      "cust.git.HunkInfo\"l\n\tGitResult\022\014\n\004repo\030\001" +
      " \001(\t\022\023\n\013initial_ref\030\002 \001(\t\022\024\n\014terminal_re" +
      "f\030\003 \001(\t\022&\n\007patches\030\004 \003(\0132\025.locust.git.Pa" +
      "tchInfob\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_locust_git_LineInfo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_locust_git_LineInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_locust_git_LineInfo_descriptor,
        new java.lang.String[] { "OldLineNumber", "NewLineNumber", "LineType", "Line", });
    internal_static_locust_git_HunkBoundary_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_locust_git_HunkBoundary_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_locust_git_HunkBoundary_descriptor,
        new java.lang.String[] { "Start", "End", "OperationType", });
    internal_static_locust_git_HunkInfo_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_locust_git_HunkInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_locust_git_HunkInfo_descriptor,
        new java.lang.String[] { "Header", "Lines", "TotalBoundary", "InsertionsBoundary", "DeletionsBoundary", });
    internal_static_locust_git_PatchInfo_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_locust_git_PatchInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_locust_git_PatchInfo_descriptor,
        new java.lang.String[] { "OldFile", "NewFile", "OldSource", "NewSource", "Hunks", });
    internal_static_locust_git_GitResult_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_locust_git_GitResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_locust_git_GitResult_descriptor,
        new java.lang.String[] { "Repo", "InitialRef", "TerminalRef", "Patches", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
